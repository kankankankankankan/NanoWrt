# MIT License
# 
# Copyright (c) 2020 vinewx
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


name: FriendlyWrt for NanoPi-NEO2

on:
  repository_dispatch:
  schedule:
    - cron: '10 0 * * 5'

  push:
    branches:
      - master

jobs:

  build:
    
    runs-on: ubuntu-18.04
    if: github.repository == 'kankankankankankan/NanoWrt'
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y install subversion bc build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler rename nettle-dev
          wget -O - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | bash
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          
      - name: Install Repo
        run: |
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/
          
      - name: Init Source
        run: |
          mkdir friendlywrt-h5
          cd friendlywrt-h5
          repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master -m h5.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

      - name: Mods
        run: |
          chmod +x scripts/*.sh
          cd friendlywrt-h5
          rm -f .repo/manifests/h5.xml
          cp ../19s_master_config.xml .repo/manifests/h5.xml
          repo sync -c --no-tags --no-clone-bundle -j8
          . ../scripts/pure_config.sh
          cat ../app_config.seed >> configs/config_h5
          cat ../forbid_config.seed | openssl enc -aes-256-cbc -a -d -pass pass:"vinewx" -pbkdf2 >> configs/config_h5
          cat ../nanohat_config.seed >> configs/config_h5
          sed -i 's/dnsmasq /dnsmasq-full /' friendlywrt/include/target.mk
          cd friendlywrt
          . ../../scripts/extra.sh
          cp ../../scripts/settings.sh package/base-files/files/root/setup.sh
          sed -i '/touch/a\    echo /etc/firstboot_${board} >> /etc/sysupgrade.conf' package/base-files/files/etc/rc.local
          mkdir -p staging_dir/host/bin
          wget -q -O - https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz | tar -Jx --strip 1 -f - -C staging_dir/host/bin upx-3.96-amd64_linux/upx
          
      - name: Clean Feeds
        run: |
          cd friendlywrt-h5/friendlywrt
          ./scripts/feeds clean -a
          sed -i '/luci/Id;' feeds.conf.default
          sed -i '/routing/i\src-git luci https://github.com/coolsnowwolf/luci' feeds.conf.default
          sed -i '/routing/a\src-git NanoHatOLED https://github.com/vinewx/NanoHatOLED.git' feeds.conf.default

      - name: Build FriendlyWrt
        run: |
          cd friendlywrt-h5
          sed -i 's/set -eu/set -u/' scripts/mk-friendlywrt.sh
          sed -i '/install/i\./../../scripts/Mods_BeforeBuild.sh' scripts/mk-friendlywrt.sh
          wget -O friendlywrt/package/libs/nettle/Makefile https://raw.githubusercontent.com/openwrt/openwrt/master/package/libs/nettle/Makefile
          ./build.sh nanopi_neo2.mk
      
      - name: Zip Files
        run: |
          gzip friendlywrt-h5/out/*.img

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          cp friendlywrt-h5/friendlywrt/.config ./artifact/.config
          config_name="NEO2_v$(date "+%Y%m%d")_Config"
          release_tag="v$(date +%Y%m%d%H%M)_NEO2"
          sd_path="./friendlywrt-h5/out/FriendlyWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"
          sd_name="FriendlyWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"        
          echo "##[set-output name=config_name;]$config_name"
          echo "##[set-output name=release_tag;]$release_tag"
          echo "##[set-output name=sd_path;]$sd_path"
          echo "##[set-output name=sd_name;]$sd_name"

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.assemble_artifact.outputs.config_name }}
          path: ./artifact/

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: Automatic Release ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload SD Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.sd_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.sd_name }}
          asset_content_type: application/gz


      - name: Setup Aliyun OSS
        uses: manyuanrong/setup-ossutil@master
        with:
          endpoint: oss-cn-shanghai.aliyuncs.com
          access-key-id: ${{ secrets.OSS_ACCESSKEYID }}
          access-key-secret: ${{ secrets.OSS_ACCESSKEYSECRET }}

      - name: CP img to Aliyun
        run: |
          rename "s/FriendlyWrt_(\d{8})_(NanoPi-NEO2)_aarch64_sd.img.gz/\2-black-\1.img.gz/" ./friendlywrt-h5/out/*.img.gz
          ossutil cp -rf ./friendlywrt-h5/out/*.img.gz oss://cdnqingjieme/firmware/NEO2-oled/
